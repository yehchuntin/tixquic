
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email != null &&
             (request.auth.token.email.matches('.*admin.*') ||
              request.auth.token.email == '2017yehchunting@gmail.com');
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Rules for the 'userEventVerifications' collection
    match /userEventVerifications/{verificationId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if isAdmin(); // Only admins can delete verification records (e.g. for cleanup)
    }

    // Rules for the 'users' collection (for loyalty points)
    match /users/{userId} {
      // User can read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      // User can create or update their own document (setDoc with merge:true handles both)
      // This rule allows users to manage their own loyalty points.
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
